/*
 * generated by Xtext 2.19.0
 */
package umlrtsyntesizer.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ConstLangGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.Context");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Assignment cInitAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInitInitParserRuleCall_4_0 = (RuleCall)cInitAssignment_4.eContents().get(0);
		private final Assignment cSystemInvariantsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSystemInvariantsSystemInvariantParserRuleCall_5_0 = (RuleCall)cSystemInvariantsAssignment_5.eContents().get(0);
		private final Assignment cMessageConstraintsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMessageConstraintsMessageConstraintParserRuleCall_6_0 = (RuleCall)cMessageConstraintsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Context:
		//	'Context' name=ID
		//	'{'
		//	attributes+=Attribute+ init=Init systemInvariants+=SystemInvariant* messageConstraints+=MessageConstraint*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Context' name=ID '{' attributes+=Attribute+ init=Init systemInvariants+=SystemInvariant*
		//messageConstraints+=MessageConstraint* '}'
		public Group getGroup() { return cGroup; }
		
		//'Context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//attributes+=Attribute+
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//init=Init
		public Assignment getInitAssignment_4() { return cInitAssignment_4; }
		
		//Init
		public RuleCall getInitInitParserRuleCall_4_0() { return cInitInitParserRuleCall_4_0; }
		
		//systemInvariants+=SystemInvariant*
		public Assignment getSystemInvariantsAssignment_5() { return cSystemInvariantsAssignment_5; }
		
		//SystemInvariant
		public RuleCall getSystemInvariantsSystemInvariantParserRuleCall_5_0() { return cSystemInvariantsSystemInvariantParserRuleCall_5_0; }
		
		//messageConstraints+=MessageConstraint*
		public Assignment getMessageConstraintsAssignment_6() { return cMessageConstraintsAssignment_6; }
		
		//MessageConstraint
		public RuleCall getMessageConstraintsMessageConstraintParserRuleCall_6_0() { return cMessageConstraintsMessageConstraintParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class InitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.Init");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Init:
		//	'Init' '{'
		//	expressions+=Expression+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Init' '{' expressions+=Expression+ '}'
		public Group getGroup() { return cGroup; }
		
		//'Init'
		public Keyword getInitKeyword_0() { return cInitKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//expressions+=Expression+
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_0() { return cExpressionsExpressionParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class SystemInvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.SystemInvariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvariantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInvariantExpAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInvariantExpExpressionParserRuleCall_2_1_0 = (RuleCall)cInvariantExpAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//SystemInvariant:
		//	'Invariant' name=ID ('{' invariantExp=Expression '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'Invariant' name=ID ('{' invariantExp=Expression '}')
		public Group getGroup() { return cGroup; }
		
		//'Invariant'
		public Keyword getInvariantKeyword_0() { return cInvariantKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('{' invariantExp=Expression '}')
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//invariantExp=Expression
		public Assignment getInvariantExpAssignment_2_1() { return cInvariantExpAssignment_2_1; }
		
		//Expression
		public RuleCall getInvariantExpExpressionParserRuleCall_2_1_0() { return cInvariantExpExpressionParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class MessageConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.MessageConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMessageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamsAttributeParserRuleCall_3_0 = (RuleCall)cParamsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cWhereToApplyAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cWhereToApplyWhereToApplyEnumEnumRuleCall_5_0_0 = (RuleCall)cWhereToApplyAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cPreKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cPreConstraintsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cPreConstraintsExpressionParserRuleCall_5_1_1_0 = (RuleCall)cPreConstraintsAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cPostKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPostConstraintsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPostConstraintsExpressionParserRuleCall_6_1_0 = (RuleCall)cPostConstraintsAssignment_6_1.eContents().get(0);
		
		//MessageConstraint:
		//	'Message' name=ID '(' params+=Attribute* ')' (WhereToApply=WhereToApplyEnum? ('Pre:' preConstraints=Expression?))?
		//	('Post:' postConstraints=Expression);
		@Override public ParserRule getRule() { return rule; }
		
		//'Message' name=ID '(' params+=Attribute* ')' (WhereToApply=WhereToApplyEnum? ('Pre:' preConstraints=Expression?))?
		//('Post:' postConstraints=Expression)
		public Group getGroup() { return cGroup; }
		
		//'Message'
		public Keyword getMessageKeyword_0() { return cMessageKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//params+=Attribute*
		public Assignment getParamsAssignment_3() { return cParamsAssignment_3; }
		
		//Attribute
		public RuleCall getParamsAttributeParserRuleCall_3_0() { return cParamsAttributeParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//(WhereToApply=WhereToApplyEnum? ('Pre:' preConstraints=Expression?))?
		public Group getGroup_5() { return cGroup_5; }
		
		//WhereToApply=WhereToApplyEnum?
		public Assignment getWhereToApplyAssignment_5_0() { return cWhereToApplyAssignment_5_0; }
		
		//WhereToApplyEnum
		public RuleCall getWhereToApplyWhereToApplyEnumEnumRuleCall_5_0_0() { return cWhereToApplyWhereToApplyEnumEnumRuleCall_5_0_0; }
		
		//('Pre:' preConstraints=Expression?)
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//'Pre:'
		public Keyword getPreKeyword_5_1_0() { return cPreKeyword_5_1_0; }
		
		//preConstraints=Expression?
		public Assignment getPreConstraintsAssignment_5_1_1() { return cPreConstraintsAssignment_5_1_1; }
		
		//Expression
		public RuleCall getPreConstraintsExpressionParserRuleCall_5_1_1_0() { return cPreConstraintsExpressionParserRuleCall_5_1_1_0; }
		
		//('Post:' postConstraints=Expression)
		public Group getGroup_6() { return cGroup_6; }
		
		//'Post:'
		public Keyword getPostKeyword_6_0() { return cPostKeyword_6_0; }
		
		//postConstraints=Expression
		public Assignment getPostConstraintsAssignment_6_1() { return cPostConstraintsAssignment_6_1; }
		
		//Expression
		public RuleCall getPostConstraintsExpressionParserRuleCall_6_1_0() { return cPostConstraintsExpressionParserRuleCall_6_1_0; }
	}
	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromValueParserRuleCall_1_0 = (RuleCall)cFromAssignment_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToValueParserRuleCall_3_0 = (RuleCall)cToAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Range:
		//	'('
		//	from=Value '..' to=Value
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' from=Value '..' to=Value ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//from=Value
		public Assignment getFromAssignment_1() { return cFromAssignment_1; }
		
		//Value
		public RuleCall getFromValueParserRuleCall_1_0() { return cFromValueParserRuleCall_1_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_2() { return cFullStopFullStopKeyword_2; }
		
		//to=Value
		public Assignment getToAssignment_3() { return cToAssignment_3; }
		
		//Value
		public RuleCall getToValueParserRuleCall_3_0() { return cToValueParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cMinuesAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cMinuesHyphenMinusKeyword_0_0_0 = (Keyword)cMinuesAssignment_0_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Assignment cFixedPointValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFixedPointValueRealLiteralParserRuleCall_1_0 = (RuleCall)cFixedPointValueAssignment_1.eContents().get(0);
		
		//Value:
		//	minues?='-'?
		//	value=INT
		//	| fixedPointValue=RealLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//minues?='-'? value=INT | fixedPointValue=RealLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//minues?='-'? value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//minues?='-'?
		public Assignment getMinuesAssignment_0_0() { return cMinuesAssignment_0_0; }
		
		//'-'
		public Keyword getMinuesHyphenMinusKeyword_0_0_0() { return cMinuesHyphenMinusKeyword_0_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//fixedPointValue=RealLiteral
		public Assignment getFixedPointValueAssignment_1() { return cFixedPointValueAssignment_1; }
		
		//RealLiteral
		public RuleCall getFixedPointValueRealLiteralParserRuleCall_1_0() { return cFixedPointValueRealLiteralParserRuleCall_1_0; }
	}
	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.RealLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIntPartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIntPartINTTerminalRuleCall_0_0 = (RuleCall)cIntPartAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDecimalPartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDecimalPartINTTerminalRuleCall_2_0 = (RuleCall)cDecimalPartAssignment_2.eContents().get(0);
		
		//RealLiteral:
		//	intPart=INT '.' decimalPart=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//intPart=INT '.' decimalPart=INT
		public Group getGroup() { return cGroup; }
		
		//intPart=INT
		public Assignment getIntPartAssignment_0() { return cIntPartAssignment_0; }
		
		//INT
		public RuleCall getIntPartINTTerminalRuleCall_0_0() { return cIntPartINTTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//decimalPart=INT
		public Assignment getDecimalPartAssignment_2() { return cDecimalPartAssignment_2; }
		
		//INT
		public RuleCall getDecimalPartINTTerminalRuleCall_2_0() { return cDecimalPartINTTerminalRuleCall_2_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyTypeVarTypeEnumRuleCall_2_0 = (RuleCall)cPropertyTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRangeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRangeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRangeRangeParserRuleCall_3_1_0 = (RuleCall)cRangeAssignment_3_1.eContents().get(0);
		
		//Attribute:
		//	name=ID ':' propertyType=VarType ('range' range=Range)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' propertyType=VarType ('range' range=Range)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//propertyType=VarType
		public Assignment getPropertyTypeAssignment_2() { return cPropertyTypeAssignment_2; }
		
		//VarType
		public RuleCall getPropertyTypeVarTypeEnumRuleCall_2_0() { return cPropertyTypeVarTypeEnumRuleCall_2_0; }
		
		//('range' range=Range)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'range'
		public Keyword getRangeKeyword_3_0() { return cRangeKeyword_3_0; }
		
		//range=Range
		public Assignment getRangeAssignment_3_1() { return cRangeAssignment_3_1; }
		
		//Range
		public RuleCall getRangeRangeParserRuleCall_3_1_0() { return cRangeRangeParserRuleCall_3_1_0; }
	}
	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyTypeVarTypeEnumRuleCall_2_0 = (RuleCall)cPropertyTypeAssignment_2.eContents().get(0);
		
		//Param:
		//	name=ID ':' propertyType=VarType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' propertyType=VarType
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//propertyType=VarType
		public Assignment getPropertyTypeAssignment_2() { return cPropertyTypeAssignment_2; }
		
		//VarType
		public RuleCall getPropertyTypeVarTypeEnumRuleCall_2_0() { return cPropertyTypeVarTypeEnumRuleCall_2_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.Expression");
		private final RuleCall cAssignParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///*=====================================================================================================
		// * Expressions
		// =====================================================================================================*/ Expression:
		//	Assign;
		@Override public ParserRule getRule() { return rule; }
		
		//Assign
		public RuleCall getAssignParserRuleCall() { return cAssignParserRuleCall; }
	}
	public class AssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.Assign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cImplieParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAssignLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightImplieParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Assign Expression:
		//	Implie ({Assign.left=current} '=' right=Implie)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Implie ({Assign.left=current} '=' right=Implie)*
		public Group getGroup() { return cGroup; }
		
		//Implie
		public RuleCall getImplieParserRuleCall_0() { return cImplieParserRuleCall_0; }
		
		//({Assign.left=current} '=' right=Implie)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Assign.left=current}
		public Action getAssignLeftAction_1_0() { return cAssignLeftAction_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//right=Implie
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Implie
		public RuleCall getRightImplieParserRuleCall_1_2_0() { return cRightImplieParserRuleCall_1_2_0; }
	}
	public class ImplieElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.Implie");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cImplieLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Implie Expression:
		//	OrExpression ({Implie.left=current} '=>' right=OrExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//OrExpression ({Implie.left=current} '=>' right=OrExpression)*
		public Group getGroup() { return cGroup; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_0() { return cOrExpressionParserRuleCall_0; }
		
		//({Implie.left=current} '=>' right=OrExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Implie.left=current}
		public Action getImplieLeftAction_1_0() { return cImplieLeftAction_1_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1_1() { return cEqualsSignGreaterThanSignKeyword_1_1; }
		
		//right=OrExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//OrExpression
		public RuleCall getRightOrExpressionParserRuleCall_1_2_0() { return cRightOrExpressionParserRuleCall_1_2_0; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpression Expression:
		//	AndExpression ({OrExpression.left=current} 'or' right=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ({OrExpression.left=current} 'or' right=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//({OrExpression.left=current} 'or' right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrExpression.left=current}
		public Action getOrExpressionLeftAction_1_0() { return cOrExpressionLeftAction_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonOperatorsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonOperatorsParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression Expression:
		//	ComparisonOperators ({AndExpression.left=current} 'and' right=ComparisonOperators)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ComparisonOperators ({AndExpression.left=current} 'and' right=ComparisonOperators)*
		public Group getGroup() { return cGroup; }
		
		//ComparisonOperators
		public RuleCall getComparisonOperatorsParserRuleCall_0() { return cComparisonOperatorsParserRuleCall_0; }
		
		//({AndExpression.left=current} 'and' right=ComparisonOperators)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndExpression.left=current}
		public Action getAndExpressionLeftAction_1_0() { return cAndExpressionLeftAction_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//right=ComparisonOperators
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ComparisonOperators
		public RuleCall getRightComparisonOperatorsParserRuleCall_1_2_0() { return cRightComparisonOperatorsParserRuleCall_1_2_0; }
	}
	public class ComparisonOperatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.ComparisonOperators");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Action cGTLeftAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Action cLTLeftAction_1_0_0_1_0 = (Action)cGroup_1_0_0_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_0_1_1 = (Keyword)cGroup_1_0_0_1.eContents().get(1);
		private final Group cGroup_1_0_0_2 = (Group)cAlternatives_1_0_0.eContents().get(2);
		private final Action cGELeftAction_1_0_0_2_0 = (Action)cGroup_1_0_0_2.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_0_2_1 = (Keyword)cGroup_1_0_0_2.eContents().get(1);
		private final Group cGroup_1_0_0_3 = (Group)cAlternatives_1_0_0.eContents().get(3);
		private final Action cLELeftAction_1_0_0_3_0 = (Action)cGroup_1_0_0_3.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_0_3_1 = (Keyword)cGroup_1_0_0_3.eContents().get(1);
		private final Group cGroup_1_0_0_4 = (Group)cAlternatives_1_0_0.eContents().get(4);
		private final Action cEQLeftAction_1_0_0_4_0 = (Action)cGroup_1_0_0_4.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0_4_1 = (Keyword)cGroup_1_0_0_4.eContents().get(1);
		private final Group cGroup_1_0_0_5 = (Group)cAlternatives_1_0_0.eContents().get(5);
		private final Action cNELeftAction_1_0_0_5_0 = (Action)cGroup_1_0_0_5.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_0_5_1 = (Keyword)cGroup_1_0_0_5.eContents().get(1);
		private final Assignment cRestAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRestAdditionParserRuleCall_1_1_0 = (RuleCall)cRestAssignment_1_1.eContents().get(0);
		
		//ComparisonOperators Expression:
		//	Addition (=>
		//	({GT.left=current} ">" // Greater Than
		//	| {LT.left=current} "<" // Lower Than
		//	| {GE.left=current} ">=" // Greater or Equal
		//	| {LE.left=current} "<=" // Lower or Equal
		//	| {EQ.left=current} "==" // Equal
		//	| {NE.left=current} "!=" // Not Equal
		//) rest=Addition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Addition (=> ({GT.left=current} ">" // Greater Than
		//| {LT.left=current} "<" // Lower Than
		//| {GE.left=current} ">=" // Greater or Equal
		//| {LE.left=current} "<=" // Lower or Equal
		//| {EQ.left=current} "==" // Equal
		//| {NE.left=current} "!=" // Not Equal
		//) rest=Addition)*
		public Group getGroup() { return cGroup; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }
		
		//(=> ({GT.left=current} ">" // Greater Than
		//| {LT.left=current} "<" // Lower Than
		//| {GE.left=current} ">=" // Greater or Equal
		//| {LE.left=current} "<=" // Lower or Equal
		//| {EQ.left=current} "==" // Equal
		//| {NE.left=current} "!=" // Not Equal
		//) rest=Addition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({GT.left=current} ">" // Greater Than
		//| {LT.left=current} "<" // Lower Than
		//| {GE.left=current} ">=" // Greater or Equal
		//| {LE.left=current} "<=" // Lower or Equal
		//| {EQ.left=current} "==" // Equal
		//| {NE.left=current} "!=" // Not Equal
		//)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({GT.left=current} ">" // Greater Than
		//| {LT.left=current} "<" // Lower Than
		//| {GE.left=current} ">=" // Greater or Equal
		//| {LE.left=current} "<=" // Lower or Equal
		//| {EQ.left=current} "==" // Equal
		//| {NE.left=current} "!=")
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//{GT.left=current} ">"
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//{GT.left=current}
		public Action getGTLeftAction_1_0_0_0_0() { return cGTLeftAction_1_0_0_0_0; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_1_0_0_0_1() { return cGreaterThanSignKeyword_1_0_0_0_1; }
		
		//{LT.left=current} "<"
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }
		
		//{LT.left=current}
		public Action getLTLeftAction_1_0_0_1_0() { return cLTLeftAction_1_0_0_1_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_1_0_0_1_1() { return cLessThanSignKeyword_1_0_0_1_1; }
		
		//{GE.left=current} ">="
		public Group getGroup_1_0_0_2() { return cGroup_1_0_0_2; }
		
		//{GE.left=current}
		public Action getGELeftAction_1_0_0_2_0() { return cGELeftAction_1_0_0_2_0; }
		
		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_0_2_1() { return cGreaterThanSignEqualsSignKeyword_1_0_0_2_1; }
		
		//{LE.left=current} "<="
		public Group getGroup_1_0_0_3() { return cGroup_1_0_0_3; }
		
		//{LE.left=current}
		public Action getLELeftAction_1_0_0_3_0() { return cLELeftAction_1_0_0_3_0; }
		
		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_0_0_3_1() { return cLessThanSignEqualsSignKeyword_1_0_0_3_1; }
		
		//{EQ.left=current} "=="
		public Group getGroup_1_0_0_4() { return cGroup_1_0_0_4; }
		
		//{EQ.left=current}
		public Action getEQLeftAction_1_0_0_4_0() { return cEQLeftAction_1_0_0_4_0; }
		
		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0_4_1() { return cEqualsSignEqualsSignKeyword_1_0_0_4_1; }
		
		//{NE.left=current} "!="
		public Group getGroup_1_0_0_5() { return cGroup_1_0_0_5; }
		
		//{NE.left=current}
		public Action getNELeftAction_1_0_0_5_0() { return cNELeftAction_1_0_0_5_0; }
		
		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_0_5_1() { return cExclamationMarkEqualsSignKeyword_1_0_0_5_1; }
		
		//rest=Addition
		public Assignment getRestAssignment_1_1() { return cRestAssignment_1_1; }
		
		//Addition
		public RuleCall getRestAdditionParserRuleCall_1_1_0() { return cRestAdditionParserRuleCall_1_1_0; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Action cAdditionLeftAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_0_1_0 = (Action)cGroup_1_0_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_0_1_1 = (Keyword)cGroup_1_0_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition Expression:
		//	Multiplication (=> ({Addition.left=current} '+'
		//	| {Minus.left=current} '-') right=Multiplication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication (=> ({Addition.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//(=> ({Addition.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({Addition.left=current} '+' | {Minus.left=current} '-')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({Addition.left=current} '+' | {Minus.left=current} '-')
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//{Addition.left=current} '+'
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//{Addition.left=current}
		public Action getAdditionLeftAction_1_0_0_0_0() { return cAdditionLeftAction_1_0_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_0_1() { return cPlusSignKeyword_1_0_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_0_1_0() { return cMinusLeftAction_1_0_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_0_1_1() { return cHyphenMinusKeyword_1_0_0_1_1; }
		
		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Action cMultiplicationLeftAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Action cDivideLeftAction_1_0_0_1_0 = (Action)cGroup_1_0_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_0_1_1 = (Keyword)cGroup_1_0_0_1.eContents().get(1);
		private final Group cGroup_1_0_0_2 = (Group)cAlternatives_1_0_0.eContents().get(2);
		private final Action cModuloLeftAction_1_0_0_2_0 = (Action)cGroup_1_0_0_2.eContents().get(0);
		private final Keyword cPercentSignKeyword_1_0_0_2_1 = (Keyword)cGroup_1_0_0_2.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUnaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication Expression:
		//	Unary (=> ({Multiplication.left=current} '*'
		//	| {Divide.left=current} '/'
		//	| {Modulo.left=current} '%') right=Unary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Unary (=> ({Multiplication.left=current} '*' | {Divide.left=current} '/' | {Modulo.left=current} '%') right=Unary)*
		public Group getGroup() { return cGroup; }
		
		//Unary
		public RuleCall getUnaryParserRuleCall_0() { return cUnaryParserRuleCall_0; }
		
		//(=> ({Multiplication.left=current} '*' | {Divide.left=current} '/' | {Modulo.left=current} '%') right=Unary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({Multiplication.left=current} '*' | {Divide.left=current} '/' | {Modulo.left=current} '%')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({Multiplication.left=current} '*' | {Divide.left=current} '/' | {Modulo.left=current} '%')
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//{Multiplication.left=current} '*'
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0_0_0_0() { return cMultiplicationLeftAction_1_0_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_0_1() { return cAsteriskKeyword_1_0_0_0_1; }
		
		//{Divide.left=current} '/'
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }
		
		//{Divide.left=current}
		public Action getDivideLeftAction_1_0_0_1_0() { return cDivideLeftAction_1_0_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_0_1_1() { return cSolidusKeyword_1_0_0_1_1; }
		
		//{Modulo.left=current} '%'
		public Group getGroup_1_0_0_2() { return cGroup_1_0_0_2; }
		
		//{Modulo.left=current}
		public Action getModuloLeftAction_1_0_0_2_0() { return cModuloLeftAction_1_0_0_2_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_1_0_0_2_1() { return cPercentSignKeyword_1_0_0_2_1; }
		
		//right=Unary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Unary
		public RuleCall getRightUnaryParserRuleCall_1_1_0() { return cRightUnaryParserRuleCall_1_1_0; }
	}
	public class UnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.Unary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionNotPlusMinusParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpUnaryParserRuleCall_1_2_0 = (RuleCall)cExpAssignment_1_2.eContents().get(0);
		
		//Unary Expression:
		//	UnaryExpressionNotPlusMinus
		//	| {UnaryExpression} '-' exp=Unary;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpressionNotPlusMinus | {UnaryExpression} '-' exp=Unary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnaryExpressionNotPlusMinus
		public RuleCall getUnaryExpressionNotPlusMinusParserRuleCall_0() { return cUnaryExpressionNotPlusMinusParserRuleCall_0; }
		
		//{UnaryExpression} '-' exp=Unary
		public Group getGroup_1() { return cGroup_1; }
		
		//{UnaryExpression}
		public Action getUnaryExpressionAction_1_0() { return cUnaryExpressionAction_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//exp=Unary
		public Assignment getExpAssignment_1_2() { return cExpAssignment_1_2; }
		
		//Unary
		public RuleCall getExpUnaryParserRuleCall_1_2_0() { return cExpUnaryParserRuleCall_1_2_0; }
	}
	public class UnaryExpressionNotPlusMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.UnaryExpressionNotPlusMinus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNotBooleanExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryExpressionNotPlusMinus Expression:
		//	NotBooleanExpression
		//	| PrimaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//NotBooleanExpression | PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NotBooleanExpression
		public RuleCall getNotBooleanExpressionParserRuleCall_0() { return cNotBooleanExpressionParserRuleCall_0; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_1() { return cPrimaryExpressionParserRuleCall_1; }
	}
	public class NotBooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.NotBooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpPrimaryExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		
		//NotBooleanExpression:
		//	'not' exp=PrimaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'not' exp=PrimaryExpression
		public Group getGroup() { return cGroup; }
		
		//'not'
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//exp=PrimaryExpression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//PrimaryExpression
		public RuleCall getExpPrimaryExpressionParserRuleCall_1_0() { return cExpPrimaryExpressionParserRuleCall_1_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralOrIdentifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PrimaryExpression Expression:
		//	LiteralOrIdentifier
		//	| '(' Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralOrIdentifier | '(' Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralOrIdentifier
		public RuleCall getLiteralOrIdentifierParserRuleCall_0() { return cLiteralOrIdentifierParserRuleCall_0; }
		
		//'(' Expression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class LiteralOrIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.LiteralOrIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LiteralOrIdentifier Expression:
		//	Literal
		//	| Identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//Literal | Identifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1() { return cIdentifierParserRuleCall_1; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.Parameter");
		private final Assignment cParamnameAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cParamnameParamCrossReference_0 = (CrossReference)cParamnameAssignment.eContents().get(0);
		private final RuleCall cParamnameParamIDTerminalRuleCall_0_1 = (RuleCall)cParamnameParamCrossReference_0.eContents().get(1);
		
		//Parameter:
		//	paramname=[Param];
		@Override public ParserRule getRule() { return rule; }
		
		//paramname=[Param]
		public Assignment getParamnameAssignment() { return cParamnameAssignment; }
		
		//[Param]
		public CrossReference getParamnameParamCrossReference_0() { return cParamnameParamCrossReference_0; }
		
		//ID
		public RuleCall getParamnameParamIDTerminalRuleCall_0_1() { return cParamnameParamIDTerminalRuleCall_0_1; }
	}
	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.Identifier");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefAttributeCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefAttributeIDTerminalRuleCall_0_1 = (RuleCall)cRefAttributeCrossReference_0.eContents().get(1);
		
		//Identifier:
		//	ref=[Attribute];
		@Override public ParserRule getRule() { return rule; }
		
		//// work after come back
		//ref=[Attribute]
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//[Attribute]
		public CrossReference getRefAttributeCrossReference_0() { return cRefAttributeCrossReference_0; }
		
		//ID
		public RuleCall getRefAttributeIDTerminalRuleCall_0_1() { return cRefAttributeIDTerminalRuleCall_0_1; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoolLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRealLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Literal:
		//	IntLiteral
		//	| BoolLiteral
		//	| RealLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//IntLiteral | BoolLiteral | RealLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_0() { return cIntLiteralParserRuleCall_0; }
		
		//BoolLiteral
		public RuleCall getBoolLiteralParserRuleCall_1() { return cBoolLiteralParserRuleCall_1; }
		
		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_2() { return cRealLiteralParserRuleCall_2; }
	}
	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.IntLiteral");
		private final Assignment cIntLiteralAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIntLiteralINTTerminalRuleCall_0 = (RuleCall)cIntLiteralAssignment.eContents().get(0);
		
		//IntLiteral:
		//	intLiteral=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//intLiteral=INT
		public Assignment getIntLiteralAssignment() { return cIntLiteralAssignment; }
		
		//INT
		public RuleCall getIntLiteralINTTerminalRuleCall_0() { return cIntLiteralINTTerminalRuleCall_0; }
	}
	public class BoolLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.BoolLiteral");
		private final Assignment cBoolLiteralAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBoolLiteralBOOLEANTerminalRuleCall_0 = (RuleCall)cBoolLiteralAssignment.eContents().get(0);
		
		//BoolLiteral:
		//	boolLiteral=BOOLEAN;
		@Override public ParserRule getRule() { return rule; }
		
		//boolLiteral=BOOLEAN
		public Assignment getBoolLiteralAssignment() { return cBoolLiteralAssignment; }
		
		//BOOLEAN
		public RuleCall getBoolLiteralBOOLEANTerminalRuleCall_0() { return cBoolLiteralBOOLEANTerminalRuleCall_0; }
	}
	
	public class VarTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.VarType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBooleanBooleanKeyword_0_0 = (Keyword)cBooleanEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntegerIntegerKeyword_1_0 = (Keyword)cIntegerEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRealEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRealRealKeyword_2_0 = (Keyword)cRealEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum VarType:
		//	Boolean | Integer | Real;
		public EnumRule getRule() { return rule; }
		
		//Boolean | Integer | Real
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_0() { return cBooleanEnumLiteralDeclaration_0; }
		
		//'Boolean'
		public Keyword getBooleanBooleanKeyword_0_0() { return cBooleanBooleanKeyword_0_0; }
		
		//Integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_1() { return cIntegerEnumLiteralDeclaration_1; }
		
		//'Integer'
		public Keyword getIntegerIntegerKeyword_1_0() { return cIntegerIntegerKeyword_1_0; }
		
		//Real
		public EnumLiteralDeclaration getRealEnumLiteralDeclaration_2() { return cRealEnumLiteralDeclaration_2; }
		
		//'Real'
		public Keyword getRealRealKeyword_2_0() { return cRealRealKeyword_2_0; }
	}
	public class WhereToApplyEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.WhereToApplyEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSERVEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSERVERServerKeyword_0_0 = (Keyword)cSERVEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCLIENTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCLIENTClientKeyword_1_0 = (Keyword)cCLIENTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum WhereToApplyEnum:
		//	SERVER='Server' | CLIENT='Client';
		public EnumRule getRule() { return rule; }
		
		//SERVER='Server' | CLIENT='Client'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SERVER='Server'
		public EnumLiteralDeclaration getSERVEREnumLiteralDeclaration_0() { return cSERVEREnumLiteralDeclaration_0; }
		
		//'Server'
		public Keyword getSERVERServerKeyword_0_0() { return cSERVERServerKeyword_0_0; }
		
		//CLIENT='Client'
		public EnumLiteralDeclaration getCLIENTEnumLiteralDeclaration_1() { return cCLIENTEnumLiteralDeclaration_1; }
		
		//'Client'
		public Keyword getCLIENTClientKeyword_1_0() { return cCLIENTClientKeyword_1_0; }
	}
	
	private final ContextElements pContext;
	private final InitElements pInit;
	private final SystemInvariantElements pSystemInvariant;
	private final MessageConstraintElements pMessageConstraint;
	private final VarTypeElements eVarType;
	private final RangeElements pRange;
	private final WhereToApplyEnumElements eWhereToApplyEnum;
	private final ValueElements pValue;
	private final RealLiteralElements pRealLiteral;
	private final AttributeElements pAttribute;
	private final ParamElements pParam;
	private final ExpressionElements pExpression;
	private final AssignElements pAssign;
	private final ImplieElements pImplie;
	private final OrExpressionElements pOrExpression;
	private final AndExpressionElements pAndExpression;
	private final ComparisonOperatorsElements pComparisonOperators;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final UnaryElements pUnary;
	private final UnaryExpressionNotPlusMinusElements pUnaryExpressionNotPlusMinus;
	private final NotBooleanExpressionElements pNotBooleanExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final LiteralOrIdentifierElements pLiteralOrIdentifier;
	private final ParameterElements pParameter;
	private final IdentifierElements pIdentifier;
	private final LiteralElements pLiteral;
	private final IntLiteralElements pIntLiteral;
	private final BoolLiteralElements pBoolLiteral;
	private final TerminalRule tBOOLEAN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ConstLangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pContext = new ContextElements();
		this.pInit = new InitElements();
		this.pSystemInvariant = new SystemInvariantElements();
		this.pMessageConstraint = new MessageConstraintElements();
		this.eVarType = new VarTypeElements();
		this.pRange = new RangeElements();
		this.eWhereToApplyEnum = new WhereToApplyEnumElements();
		this.pValue = new ValueElements();
		this.pRealLiteral = new RealLiteralElements();
		this.pAttribute = new AttributeElements();
		this.pParam = new ParamElements();
		this.pExpression = new ExpressionElements();
		this.pAssign = new AssignElements();
		this.pImplie = new ImplieElements();
		this.pOrExpression = new OrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pComparisonOperators = new ComparisonOperatorsElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pUnary = new UnaryElements();
		this.pUnaryExpressionNotPlusMinus = new UnaryExpressionNotPlusMinusElements();
		this.pNotBooleanExpression = new NotBooleanExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pLiteralOrIdentifier = new LiteralOrIdentifierElements();
		this.pParameter = new ParameterElements();
		this.pIdentifier = new IdentifierElements();
		this.pLiteral = new LiteralElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pBoolLiteral = new BoolLiteralElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ConstLang.BOOLEAN");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("umlrtsyntesizer.ConstLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Context:
	//	'Context' name=ID
	//	'{'
	//	attributes+=Attribute+ init=Init systemInvariants+=SystemInvariant* messageConstraints+=MessageConstraint*
	//	'}';
	public ContextElements getContextAccess() {
		return pContext;
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}
	
	//Init:
	//	'Init' '{'
	//	expressions+=Expression+
	//	'}';
	public InitElements getInitAccess() {
		return pInit;
	}
	
	public ParserRule getInitRule() {
		return getInitAccess().getRule();
	}
	
	//SystemInvariant:
	//	'Invariant' name=ID ('{' invariantExp=Expression '}');
	public SystemInvariantElements getSystemInvariantAccess() {
		return pSystemInvariant;
	}
	
	public ParserRule getSystemInvariantRule() {
		return getSystemInvariantAccess().getRule();
	}
	
	//MessageConstraint:
	//	'Message' name=ID '(' params+=Attribute* ')' (WhereToApply=WhereToApplyEnum? ('Pre:' preConstraints=Expression?))?
	//	('Post:' postConstraints=Expression);
	public MessageConstraintElements getMessageConstraintAccess() {
		return pMessageConstraint;
	}
	
	public ParserRule getMessageConstraintRule() {
		return getMessageConstraintAccess().getRule();
	}
	
	//enum VarType:
	//	Boolean | Integer | Real;
	public VarTypeElements getVarTypeAccess() {
		return eVarType;
	}
	
	public EnumRule getVarTypeRule() {
		return getVarTypeAccess().getRule();
	}
	
	//Range:
	//	'('
	//	from=Value '..' to=Value
	//	')';
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}
	
	//enum WhereToApplyEnum:
	//	SERVER='Server' | CLIENT='Client';
	public WhereToApplyEnumElements getWhereToApplyEnumAccess() {
		return eWhereToApplyEnum;
	}
	
	public EnumRule getWhereToApplyEnumRule() {
		return getWhereToApplyEnumAccess().getRule();
	}
	
	//Value:
	//	minues?='-'?
	//	value=INT
	//	| fixedPointValue=RealLiteral;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//RealLiteral:
	//	intPart=INT '.' decimalPart=INT;
	public RealLiteralElements getRealLiteralAccess() {
		return pRealLiteral;
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}
	
	//Attribute:
	//	name=ID ':' propertyType=VarType ('range' range=Range)?;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Param:
	//	name=ID ':' propertyType=VarType;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}
	
	///*=====================================================================================================
	// * Expressions
	// =====================================================================================================*/ Expression:
	//	Assign;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Assign Expression:
	//	Implie ({Assign.left=current} '=' right=Implie)*;
	public AssignElements getAssignAccess() {
		return pAssign;
	}
	
	public ParserRule getAssignRule() {
		return getAssignAccess().getRule();
	}
	
	//Implie Expression:
	//	OrExpression ({Implie.left=current} '=>' right=OrExpression)*;
	public ImplieElements getImplieAccess() {
		return pImplie;
	}
	
	public ParserRule getImplieRule() {
		return getImplieAccess().getRule();
	}
	
	//OrExpression Expression:
	//	AndExpression ({OrExpression.left=current} 'or' right=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//AndExpression Expression:
	//	ComparisonOperators ({AndExpression.left=current} 'and' right=ComparisonOperators)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//ComparisonOperators Expression:
	//	Addition (=>
	//	({GT.left=current} ">" // Greater Than
	//	| {LT.left=current} "<" // Lower Than
	//	| {GE.left=current} ">=" // Greater or Equal
	//	| {LE.left=current} "<=" // Lower or Equal
	//	| {EQ.left=current} "==" // Equal
	//	| {NE.left=current} "!=" // Not Equal
	//) rest=Addition)*;
	public ComparisonOperatorsElements getComparisonOperatorsAccess() {
		return pComparisonOperators;
	}
	
	public ParserRule getComparisonOperatorsRule() {
		return getComparisonOperatorsAccess().getRule();
	}
	
	//Addition Expression:
	//	Multiplication (=> ({Addition.left=current} '+'
	//	| {Minus.left=current} '-') right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication Expression:
	//	Unary (=> ({Multiplication.left=current} '*'
	//	| {Divide.left=current} '/'
	//	| {Modulo.left=current} '%') right=Unary)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Unary Expression:
	//	UnaryExpressionNotPlusMinus
	//	| {UnaryExpression} '-' exp=Unary;
	public UnaryElements getUnaryAccess() {
		return pUnary;
	}
	
	public ParserRule getUnaryRule() {
		return getUnaryAccess().getRule();
	}
	
	//UnaryExpressionNotPlusMinus Expression:
	//	NotBooleanExpression
	//	| PrimaryExpression;
	public UnaryExpressionNotPlusMinusElements getUnaryExpressionNotPlusMinusAccess() {
		return pUnaryExpressionNotPlusMinus;
	}
	
	public ParserRule getUnaryExpressionNotPlusMinusRule() {
		return getUnaryExpressionNotPlusMinusAccess().getRule();
	}
	
	//NotBooleanExpression:
	//	'not' exp=PrimaryExpression;
	public NotBooleanExpressionElements getNotBooleanExpressionAccess() {
		return pNotBooleanExpression;
	}
	
	public ParserRule getNotBooleanExpressionRule() {
		return getNotBooleanExpressionAccess().getRule();
	}
	
	//PrimaryExpression Expression:
	//	LiteralOrIdentifier
	//	| '(' Expression ')';
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//LiteralOrIdentifier Expression:
	//	Literal
	//	| Identifier;
	public LiteralOrIdentifierElements getLiteralOrIdentifierAccess() {
		return pLiteralOrIdentifier;
	}
	
	public ParserRule getLiteralOrIdentifierRule() {
		return getLiteralOrIdentifierAccess().getRule();
	}
	
	//Parameter:
	//	paramname=[Param];
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Identifier:
	//	ref=[Attribute];
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	//Literal:
	//	IntLiteral
	//	| BoolLiteral
	//	| RealLiteral;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//IntLiteral:
	//	intLiteral=INT;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//BoolLiteral:
	//	boolLiteral=BOOLEAN;
	public BoolLiteralElements getBoolLiteralAccess() {
		return pBoolLiteral;
	}
	
	public ParserRule getBoolLiteralRule() {
		return getBoolLiteralAccess().getRule();
	}
	
	//terminal BOOLEAN:
	//	'true'
	//	| 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
