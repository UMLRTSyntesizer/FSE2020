/*
 * generated by Xtext 2.19.0
 */
grammar InternalExecTraces;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package umlrtsyntesizer.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package umlrtsyntesizer.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import umlrtsyntesizer.services.ExecTracesGrammarAccess;

}

@parser::members {

 	private ExecTracesGrammarAccess grammarAccess;

    public InternalExecTracesParser(TokenStream input, ExecTracesGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ExecTraces";
   	}

   	@Override
   	protected ExecTracesGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleExecTraces
entryRuleExecTraces returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExecTracesRule()); }
	iv_ruleExecTraces=ruleExecTraces
	{ $current=$iv_ruleExecTraces.current; }
	EOF;

// Rule ExecTraces
ruleExecTraces returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_ComponentName_0_0=RULE_ID
				{
					newLeafNode(lv_ComponentName_0_0, grammarAccess.getExecTracesAccess().getComponentNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExecTracesRule());
					}
					setWithLastConsumed(
						$current,
						"ComponentName",
						lv_ComponentName_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getExecTracesAccess().getNodeNodeParserRuleCall_1_0_0());
					}
					lv_Node_1_0=ruleNode
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExecTracesRule());
						}
						add(
							$current,
							"Node",
							lv_Node_1_0,
							"umlrtsyntesizer.ExecTraces.Node");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getExecTracesAccess().getEdgeEdgeParserRuleCall_1_1_0());
					}
					lv_Edge_2_0=ruleEdge
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExecTracesRule());
						}
						add(
							$current,
							"Edge",
							lv_Edge_2_0,
							"umlrtsyntesizer.ExecTraces.Edge");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
	)
;

// Entry rule entryRuleEdge
entryRuleEdge returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEdgeRule()); }
	iv_ruleEdge=ruleEdge
	{ $current=$iv_ruleEdge.current; }
	EOF;

// Rule Edge
ruleEdge returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='From'
		{
			newLeafNode(otherlv_0, grammarAccess.getEdgeAccess().getFromKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEdgeRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getEdgeAccess().getSourceNodeCrossReference_1_0());
				}
			)
		)
		otherlv_2='To'
		{
			newLeafNode(otherlv_2, grammarAccess.getEdgeAccess().getToKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEdgeRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getEdgeAccess().getDestinationNodeCrossReference_3_0());
				}
			)
		)
		otherlv_4='Trigger'
		{
			newLeafNode(otherlv_4, grammarAccess.getEdgeAccess().getTriggerKeyword_4());
		}
		(
			(
				lv_trigger_5_0=RULE_STRING
				{
					newLeafNode(lv_trigger_5_0, grammarAccess.getEdgeAccess().getTriggerSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEdgeRule());
					}
					setWithLastConsumed(
						$current,
						"trigger",
						lv_trigger_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_6='Actions'
		{
			newLeafNode(otherlv_6, grammarAccess.getEdgeAccess().getActionsKeyword_6());
		}
		(
			(
				lv_actions_7_0=RULE_STRING
				{
					newLeafNode(lv_actions_7_0, grammarAccess.getEdgeAccess().getActionsSTRINGTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEdgeRule());
					}
					setWithLastConsumed(
						$current,
						"actions",
						lv_actions_7_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_8='Status'
		{
			newLeafNode(otherlv_8, grammarAccess.getEdgeAccess().getStatusKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEdgeAccess().getStatusTransStatusEnumRuleCall_9_0());
				}
				lv_status_9_0=ruleTransStatus
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEdgeRule());
					}
					set(
						$current,
						"status",
						lv_status_9_0,
						"umlrtsyntesizer.ExecTraces.TransStatus");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10='guard'
		{
			newLeafNode(otherlv_10, grammarAccess.getEdgeAccess().getGuardKeyword_10());
		}
		(
			(
				lv_guard_11_0=RULE_STRING
				{
					newLeafNode(lv_guard_11_0, grammarAccess.getEdgeAccess().getGuardSTRINGTerminalRuleCall_11_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEdgeRule());
					}
					setWithLastConsumed(
						$current,
						"guard",
						lv_guard_11_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	iv_ruleNode=ruleNode
	{ $current=$iv_ruleNode.current; }
	EOF;

// Rule Node
ruleNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='name'
		{
			newLeafNode(otherlv_0, grammarAccess.getNodeAccess().getNameKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='id'
		{
			newLeafNode(otherlv_2, grammarAccess.getNodeAccess().getIdKeyword_2());
		}
		(
			(
				lv_id_3_0=RULE_INT
				{
					newLeafNode(lv_id_3_0, grammarAccess.getNodeAccess().getIdINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4='level'
		{
			newLeafNode(otherlv_4, grammarAccess.getNodeAccess().getLevelKeyword_4());
		}
		(
			(
				lv_level_5_0=RULE_INT
				{
					newLeafNode(lv_level_5_0, grammarAccess.getNodeAccess().getLevelINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeRule());
					}
					setWithLastConsumed(
						$current,
						"level",
						lv_level_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6='VarData'
		{
			newLeafNode(otherlv_6, grammarAccess.getNodeAccess().getVarDataKeyword_6());
		}
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getNodeAccess().getLeftCurlyBracketKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNodeAccess().getVarDataVariableParserRuleCall_8_0());
				}
				lv_VarData_8_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNodeRule());
					}
					add(
						$current,
						"VarData",
						lv_VarData_8_0,
						"umlrtsyntesizer.ExecTraces.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getNodeAccess().getRightCurlyBracketKeyword_9());
		}
		otherlv_10='status'
		{
			newLeafNode(otherlv_10, grammarAccess.getNodeAccess().getStatusKeyword_10());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNodeAccess().getStatusStateStatusEnumRuleCall_11_0());
				}
				lv_status_11_0=ruleStateStatus
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNodeRule());
					}
					set(
						$current,
						"status",
						lv_status_11_0,
						"umlrtsyntesizer.ExecTraces.StateStatus");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_12='constraints'
		{
			newLeafNode(otherlv_12, grammarAccess.getNodeAccess().getConstraintsKeyword_12());
		}
		(
			(
				lv_constraints_13_0=RULE_STRING
				{
					newLeafNode(lv_constraints_13_0, grammarAccess.getNodeAccess().getConstraintsSTRINGTerminalRuleCall_13_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeRule());
					}
					setWithLastConsumed(
						$current,
						"constraints",
						lv_constraints_13_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_14='outgoingEdges'
		{
			newLeafNode(otherlv_14, grammarAccess.getNodeAccess().getOutgoingEdgesKeyword_14());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeRule());
					}
				}
				otherlv_15=RULE_ID
				{
					newLeafNode(otherlv_15, grammarAccess.getNodeAccess().getOutgoingEdgesEdgeCrossReference_15_0());
				}
			)
		)*
		otherlv_16='incomingEdges'
		{
			newLeafNode(otherlv_16, grammarAccess.getNodeAccess().getIncomingEdgesKeyword_16());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeRule());
					}
				}
				otherlv_17=RULE_ID
				{
					newLeafNode(otherlv_17, grammarAccess.getNodeAccess().getIncomingEdgesEdgeCrossReference_17_0());
				}
			)
		)*
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='name'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableAccess().getNameKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getVariableAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getValueLiteralParserRuleCall_3_0());
				}
				lv_value_3_0=ruleLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"umlrtsyntesizer.ExecTraces.Literal");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRealLiteral
entryRuleRealLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRealLiteralRule()); }
	iv_ruleRealLiteral=ruleRealLiteral
	{ $current=$iv_ruleRealLiteral.current; }
	EOF;

// Rule RealLiteral
ruleRealLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_intPart_0_0=RULE_INT
				{
					newLeafNode(lv_intPart_0_0, grammarAccess.getRealLiteralAccess().getIntPartINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRealLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"intPart",
						lv_intPart_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getRealLiteralAccess().getFullStopKeyword_1());
		}
		(
			(
				lv_decimalPart_2_0=RULE_INT
				{
					newLeafNode(lv_decimalPart_2_0, grammarAccess.getRealLiteralAccess().getDecimalPartINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRealLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"decimalPart",
						lv_decimalPart_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current; }
	EOF;

// Rule Literal
ruleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getIntLiteralParserRuleCall_0());
		}
		this_IntLiteral_0=ruleIntLiteral
		{
			$current = $this_IntLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getBoolLiteralParserRuleCall_1());
		}
		this_BoolLiteral_1=ruleBoolLiteral
		{
			$current = $this_BoolLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getRealLiteralParserRuleCall_2());
		}
		this_RealLiteral_2=ruleRealLiteral
		{
			$current = $this_RealLiteral_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIntLiteral
entryRuleIntLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntLiteralRule()); }
	iv_ruleIntLiteral=ruleIntLiteral
	{ $current=$iv_ruleIntLiteral.current; }
	EOF;

// Rule IntLiteral
ruleIntLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_int_0_0=RULE_INT
			{
				newLeafNode(lv_int_0_0, grammarAccess.getIntLiteralAccess().getIntINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"int",
					lv_int_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleBoolLiteral
entryRuleBoolLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolLiteralRule()); }
	iv_ruleBoolLiteral=ruleBoolLiteral
	{ $current=$iv_ruleBoolLiteral.current; }
	EOF;

// Rule BoolLiteral
ruleBoolLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_bool_0_0=RULE_BOOLEAN
			{
				newLeafNode(lv_bool_0_0, grammarAccess.getBoolLiteralAccess().getBoolBOOLEANTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getBoolLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"bool",
					lv_bool_0_0,
					"umlrtsyntesizer.ExecTraces.BOOLEAN");
			}
		)
	)
;

// Rule StateStatus
ruleStateStatus returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='new'
			{
				$current = grammarAccess.getStateStatusAccess().getNewEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getStateStatusAccess().getNewEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='unSafeTrans'
			{
				$current = grammarAccess.getStateStatusAccess().getUnSafeStateEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getStateStatusAccess().getUnSafeStateEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='repeated'
			{
				$current = grammarAccess.getStateStatusAccess().getRepeatedEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getStateStatusAccess().getRepeatedEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule TransStatus
ruleTransStatus returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Normal'
			{
				$current = grammarAccess.getTransStatusAccess().getNormalEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTransStatusAccess().getNormalEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Error'
			{
				$current = grammarAccess.getTransStatusAccess().getErrorEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTransStatusAccess().getErrorEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='unSafeTrans'
			{
				$current = grammarAccess.getTransStatusAccess().getUnsafeTransEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTransStatusAccess().getUnsafeTransEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Redundant'
			{
				$current = grammarAccess.getTransStatusAccess().getRedundantTransEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getTransStatusAccess().getRedundantTransEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
