/*
 * generated by Xtext 2.19.0
 */
package umlrtsyntesizer.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import umlrtsyntesizer.execTraces.BoolLiteral;
import umlrtsyntesizer.execTraces.Edge;
import umlrtsyntesizer.execTraces.ExecTraces;
import umlrtsyntesizer.execTraces.ExecTracesPackage;
import umlrtsyntesizer.execTraces.IntLiteral;
import umlrtsyntesizer.execTraces.Node;
import umlrtsyntesizer.execTraces.RealLiteral;
import umlrtsyntesizer.execTraces.Variable;
import umlrtsyntesizer.services.ExecTracesGrammarAccess;

@SuppressWarnings("all")
public class ExecTracesSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ExecTracesGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ExecTracesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ExecTracesPackage.BOOL_LITERAL:
				sequence_BoolLiteral(context, (BoolLiteral) semanticObject); 
				return; 
			case ExecTracesPackage.EDGE:
				sequence_Edge(context, (Edge) semanticObject); 
				return; 
			case ExecTracesPackage.EXEC_TRACES:
				sequence_ExecTraces(context, (ExecTraces) semanticObject); 
				return; 
			case ExecTracesPackage.INT_LITERAL:
				sequence_IntLiteral(context, (IntLiteral) semanticObject); 
				return; 
			case ExecTracesPackage.NODE:
				sequence_Node(context, (Node) semanticObject); 
				return; 
			case ExecTracesPackage.REAL_LITERAL:
				sequence_RealLiteral(context, (RealLiteral) semanticObject); 
				return; 
			case ExecTracesPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Literal returns BoolLiteral
	 *     BoolLiteral returns BoolLiteral
	 *
	 * Constraint:
	 *     bool=BOOLEAN
	 */
	protected void sequence_BoolLiteral(ISerializationContext context, BoolLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExecTracesPackage.Literals.BOOL_LITERAL__BOOL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExecTracesPackage.Literals.BOOL_LITERAL__BOOL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBoolLiteralAccess().getBoolBOOLEANTerminalRuleCall_0(), semanticObject.getBool());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Edge returns Edge
	 *
	 * Constraint:
	 *     (
	 *         source=[Node|ID] 
	 *         destination=[Node|ID] 
	 *         trigger=STRING 
	 *         actions=STRING 
	 *         status=TransStatus 
	 *         guard=STRING
	 *     )
	 */
	protected void sequence_Edge(ISerializationContext context, Edge semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExecTracesPackage.Literals.EDGE__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExecTracesPackage.Literals.EDGE__SOURCE));
			if (transientValues.isValueTransient(semanticObject, ExecTracesPackage.Literals.EDGE__DESTINATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExecTracesPackage.Literals.EDGE__DESTINATION));
			if (transientValues.isValueTransient(semanticObject, ExecTracesPackage.Literals.EDGE__TRIGGER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExecTracesPackage.Literals.EDGE__TRIGGER));
			if (transientValues.isValueTransient(semanticObject, ExecTracesPackage.Literals.EDGE__ACTIONS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExecTracesPackage.Literals.EDGE__ACTIONS));
			if (transientValues.isValueTransient(semanticObject, ExecTracesPackage.Literals.EDGE__STATUS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExecTracesPackage.Literals.EDGE__STATUS));
			if (transientValues.isValueTransient(semanticObject, ExecTracesPackage.Literals.EDGE__GUARD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExecTracesPackage.Literals.EDGE__GUARD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEdgeAccess().getSourceNodeIDTerminalRuleCall_1_0_1(), semanticObject.eGet(ExecTracesPackage.Literals.EDGE__SOURCE, false));
		feeder.accept(grammarAccess.getEdgeAccess().getDestinationNodeIDTerminalRuleCall_3_0_1(), semanticObject.eGet(ExecTracesPackage.Literals.EDGE__DESTINATION, false));
		feeder.accept(grammarAccess.getEdgeAccess().getTriggerSTRINGTerminalRuleCall_5_0(), semanticObject.getTrigger());
		feeder.accept(grammarAccess.getEdgeAccess().getActionsSTRINGTerminalRuleCall_7_0(), semanticObject.getActions());
		feeder.accept(grammarAccess.getEdgeAccess().getStatusTransStatusEnumRuleCall_9_0(), semanticObject.getStatus());
		feeder.accept(grammarAccess.getEdgeAccess().getGuardSTRINGTerminalRuleCall_11_0(), semanticObject.getGuard());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExecTraces returns ExecTraces
	 *
	 * Constraint:
	 *     (ComponentName=ID (Node+=Node | Edge+=Edge)+)
	 */
	protected void sequence_ExecTraces(ISerializationContext context, ExecTraces semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Literal returns IntLiteral
	 *     IntLiteral returns IntLiteral
	 *
	 * Constraint:
	 *     int=INT
	 */
	protected void sequence_IntLiteral(ISerializationContext context, IntLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExecTracesPackage.Literals.INT_LITERAL__INT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExecTracesPackage.Literals.INT_LITERAL__INT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntLiteralAccess().getIntINTTerminalRuleCall_0(), semanticObject.getInt());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Node returns Node
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         id=INT 
	 *         level=INT 
	 *         VarData+=Variable* 
	 *         status=StateStatus 
	 *         constraints=STRING 
	 *         outgoingEdges+=[Edge|ID]* 
	 *         incomingEdges+=[Edge|ID]*
	 *     )
	 */
	protected void sequence_Node(ISerializationContext context, Node semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RealLiteral returns RealLiteral
	 *     Literal returns RealLiteral
	 *
	 * Constraint:
	 *     (intPart=INT decimalPart=INT)
	 */
	protected void sequence_RealLiteral(ISerializationContext context, RealLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExecTracesPackage.Literals.REAL_LITERAL__INT_PART) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExecTracesPackage.Literals.REAL_LITERAL__INT_PART));
			if (transientValues.isValueTransient(semanticObject, ExecTracesPackage.Literals.REAL_LITERAL__DECIMAL_PART) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExecTracesPackage.Literals.REAL_LITERAL__DECIMAL_PART));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRealLiteralAccess().getIntPartINTTerminalRuleCall_0_0(), semanticObject.getIntPart());
		feeder.accept(grammarAccess.getRealLiteralAccess().getDecimalPartINTTerminalRuleCall_2_0(), semanticObject.getDecimalPart());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     (name=ID value=Literal)
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ExecTracesPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExecTracesPackage.Literals.VARIABLE__NAME));
			if (transientValues.isValueTransient(semanticObject, ExecTracesPackage.Literals.VARIABLE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ExecTracesPackage.Literals.VARIABLE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getVariableAccess().getValueLiteralParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
