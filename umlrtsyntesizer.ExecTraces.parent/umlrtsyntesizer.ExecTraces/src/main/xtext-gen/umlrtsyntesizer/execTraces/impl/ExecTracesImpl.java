/**
 * generated by Xtext 2.19.0
 */
package umlrtsyntesizer.execTraces.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import umlrtsyntesizer.execTraces.Edge;
import umlrtsyntesizer.execTraces.ExecTraces;
import umlrtsyntesizer.execTraces.ExecTracesPackage;
import umlrtsyntesizer.execTraces.Node;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Exec Traces</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link umlrtsyntesizer.execTraces.impl.ExecTracesImpl#getComponentName <em>Component Name</em>}</li>
 *   <li>{@link umlrtsyntesizer.execTraces.impl.ExecTracesImpl#getNode <em>Node</em>}</li>
 *   <li>{@link umlrtsyntesizer.execTraces.impl.ExecTracesImpl#getEdge <em>Edge</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExecTracesImpl extends MinimalEObjectImpl.Container implements ExecTraces
{
  /**
   * The default value of the '{@link #getComponentName() <em>Component Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponentName()
   * @generated
   * @ordered
   */
  protected static final String COMPONENT_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getComponentName() <em>Component Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponentName()
   * @generated
   * @ordered
   */
  protected String componentName = COMPONENT_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getNode() <em>Node</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNode()
   * @generated
   * @ordered
   */
  protected EList<Node> node;

  /**
   * The cached value of the '{@link #getEdge() <em>Edge</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEdge()
   * @generated
   * @ordered
   */
  protected EList<Edge> edge;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExecTracesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ExecTracesPackage.Literals.EXEC_TRACES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getComponentName()
  {
    return componentName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setComponentName(String newComponentName)
  {
    String oldComponentName = componentName;
    componentName = newComponentName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExecTracesPackage.EXEC_TRACES__COMPONENT_NAME, oldComponentName, componentName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Node> getNode()
  {
    if (node == null)
    {
      node = new EObjectContainmentEList<Node>(Node.class, this, ExecTracesPackage.EXEC_TRACES__NODE);
    }
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Edge> getEdge()
  {
    if (edge == null)
    {
      edge = new EObjectContainmentEList<Edge>(Edge.class, this, ExecTracesPackage.EXEC_TRACES__EDGE);
    }
    return edge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ExecTracesPackage.EXEC_TRACES__NODE:
        return ((InternalEList<?>)getNode()).basicRemove(otherEnd, msgs);
      case ExecTracesPackage.EXEC_TRACES__EDGE:
        return ((InternalEList<?>)getEdge()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ExecTracesPackage.EXEC_TRACES__COMPONENT_NAME:
        return getComponentName();
      case ExecTracesPackage.EXEC_TRACES__NODE:
        return getNode();
      case ExecTracesPackage.EXEC_TRACES__EDGE:
        return getEdge();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ExecTracesPackage.EXEC_TRACES__COMPONENT_NAME:
        setComponentName((String)newValue);
        return;
      case ExecTracesPackage.EXEC_TRACES__NODE:
        getNode().clear();
        getNode().addAll((Collection<? extends Node>)newValue);
        return;
      case ExecTracesPackage.EXEC_TRACES__EDGE:
        getEdge().clear();
        getEdge().addAll((Collection<? extends Edge>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ExecTracesPackage.EXEC_TRACES__COMPONENT_NAME:
        setComponentName(COMPONENT_NAME_EDEFAULT);
        return;
      case ExecTracesPackage.EXEC_TRACES__NODE:
        getNode().clear();
        return;
      case ExecTracesPackage.EXEC_TRACES__EDGE:
        getEdge().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ExecTracesPackage.EXEC_TRACES__COMPONENT_NAME:
        return COMPONENT_NAME_EDEFAULT == null ? componentName != null : !COMPONENT_NAME_EDEFAULT.equals(componentName);
      case ExecTracesPackage.EXEC_TRACES__NODE:
        return node != null && !node.isEmpty();
      case ExecTracesPackage.EXEC_TRACES__EDGE:
        return edge != null && !edge.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (ComponentName: ");
    result.append(componentName);
    result.append(')');
    return result.toString();
  }

} //ExecTracesImpl
