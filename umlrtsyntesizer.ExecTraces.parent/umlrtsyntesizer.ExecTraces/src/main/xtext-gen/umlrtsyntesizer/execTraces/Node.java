/**
 * generated by Xtext 2.19.0
 */
package umlrtsyntesizer.execTraces;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Node</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link umlrtsyntesizer.execTraces.Node#getName <em>Name</em>}</li>
 *   <li>{@link umlrtsyntesizer.execTraces.Node#getId <em>Id</em>}</li>
 *   <li>{@link umlrtsyntesizer.execTraces.Node#getLevel <em>Level</em>}</li>
 *   <li>{@link umlrtsyntesizer.execTraces.Node#getVarData <em>Var Data</em>}</li>
 *   <li>{@link umlrtsyntesizer.execTraces.Node#getStatus <em>Status</em>}</li>
 *   <li>{@link umlrtsyntesizer.execTraces.Node#getConstraints <em>Constraints</em>}</li>
 *   <li>{@link umlrtsyntesizer.execTraces.Node#getOutgoingEdges <em>Outgoing Edges</em>}</li>
 *   <li>{@link umlrtsyntesizer.execTraces.Node#getIncomingEdges <em>Incoming Edges</em>}</li>
 * </ul>
 *
 * @see umlrtsyntesizer.execTraces.ExecTracesPackage#getNode()
 * @model
 * @generated
 */
public interface Node extends EObject
{
  /**
   * Returns the value of the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Name</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Name</em>' attribute.
   * @see #setName(String)
   * @see umlrtsyntesizer.execTraces.ExecTracesPackage#getNode_Name()
   * @model
   * @generated
   */
  String getName();

  /**
   * Sets the value of the '{@link umlrtsyntesizer.execTraces.Node#getName <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Name</em>' attribute.
   * @see #getName()
   * @generated
   */
  void setName(String value);

  /**
   * Returns the value of the '<em><b>Id</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Id</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Id</em>' attribute.
   * @see #setId(int)
   * @see umlrtsyntesizer.execTraces.ExecTracesPackage#getNode_Id()
   * @model
   * @generated
   */
  int getId();

  /**
   * Sets the value of the '{@link umlrtsyntesizer.execTraces.Node#getId <em>Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Id</em>' attribute.
   * @see #getId()
   * @generated
   */
  void setId(int value);

  /**
   * Returns the value of the '<em><b>Level</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Level</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Level</em>' attribute.
   * @see #setLevel(int)
   * @see umlrtsyntesizer.execTraces.ExecTracesPackage#getNode_Level()
   * @model
   * @generated
   */
  int getLevel();

  /**
   * Sets the value of the '{@link umlrtsyntesizer.execTraces.Node#getLevel <em>Level</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Level</em>' attribute.
   * @see #getLevel()
   * @generated
   */
  void setLevel(int value);

  /**
   * Returns the value of the '<em><b>Var Data</b></em>' containment reference list.
   * The list contents are of type {@link umlrtsyntesizer.execTraces.Variable}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Var Data</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Var Data</em>' containment reference list.
   * @see umlrtsyntesizer.execTraces.ExecTracesPackage#getNode_VarData()
   * @model containment="true"
   * @generated
   */
  EList<Variable> getVarData();

  /**
   * Returns the value of the '<em><b>Status</b></em>' attribute.
   * The literals are from the enumeration {@link umlrtsyntesizer.execTraces.StateStatus}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Status</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Status</em>' attribute.
   * @see umlrtsyntesizer.execTraces.StateStatus
   * @see #setStatus(StateStatus)
   * @see umlrtsyntesizer.execTraces.ExecTracesPackage#getNode_Status()
   * @model
   * @generated
   */
  StateStatus getStatus();

  /**
   * Sets the value of the '{@link umlrtsyntesizer.execTraces.Node#getStatus <em>Status</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Status</em>' attribute.
   * @see umlrtsyntesizer.execTraces.StateStatus
   * @see #getStatus()
   * @generated
   */
  void setStatus(StateStatus value);

  /**
   * Returns the value of the '<em><b>Constraints</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Constraints</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Constraints</em>' attribute.
   * @see #setConstraints(String)
   * @see umlrtsyntesizer.execTraces.ExecTracesPackage#getNode_Constraints()
   * @model
   * @generated
   */
  String getConstraints();

  /**
   * Sets the value of the '{@link umlrtsyntesizer.execTraces.Node#getConstraints <em>Constraints</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Constraints</em>' attribute.
   * @see #getConstraints()
   * @generated
   */
  void setConstraints(String value);

  /**
   * Returns the value of the '<em><b>Outgoing Edges</b></em>' reference list.
   * The list contents are of type {@link umlrtsyntesizer.execTraces.Edge}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Outgoing Edges</em>' reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Outgoing Edges</em>' reference list.
   * @see umlrtsyntesizer.execTraces.ExecTracesPackage#getNode_OutgoingEdges()
   * @model
   * @generated
   */
  EList<Edge> getOutgoingEdges();

  /**
   * Returns the value of the '<em><b>Incoming Edges</b></em>' reference list.
   * The list contents are of type {@link umlrtsyntesizer.execTraces.Edge}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Incoming Edges</em>' reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Incoming Edges</em>' reference list.
   * @see umlrtsyntesizer.execTraces.ExecTracesPackage#getNode_IncomingEdges()
   * @model
   * @generated
   */
  EList<Edge> getIncomingEdges();

} // Node
