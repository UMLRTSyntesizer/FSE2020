/*
 * generated by Xtext 2.19.0
 */
package umlrtsyntesizer.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ExecTracesGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ExecTracesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ExecTraces.ExecTraces");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComponentNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cComponentNameIDTerminalRuleCall_0_0 = (RuleCall)cComponentNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNodeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNodeNodeParserRuleCall_1_0_0 = (RuleCall)cNodeAssignment_1_0.eContents().get(0);
		private final Assignment cEdgeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cEdgeEdgeParserRuleCall_1_1_0 = (RuleCall)cEdgeAssignment_1_1.eContents().get(0);
		
		//ExecTraces:
		//	ComponentName=ID (Node+=Node | Edge+=Edge)+;
		@Override public ParserRule getRule() { return rule; }
		
		//ComponentName=ID (Node+=Node | Edge+=Edge)+
		public Group getGroup() { return cGroup; }
		
		//ComponentName=ID
		public Assignment getComponentNameAssignment_0() { return cComponentNameAssignment_0; }
		
		//ID
		public RuleCall getComponentNameIDTerminalRuleCall_0_0() { return cComponentNameIDTerminalRuleCall_0_0; }
		
		//(Node+=Node | Edge+=Edge)+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Node+=Node
		public Assignment getNodeAssignment_1_0() { return cNodeAssignment_1_0; }
		
		//Node
		public RuleCall getNodeNodeParserRuleCall_1_0_0() { return cNodeNodeParserRuleCall_1_0_0; }
		
		//Edge+=Edge
		public Assignment getEdgeAssignment_1_1() { return cEdgeAssignment_1_1; }
		
		//Edge
		public RuleCall getEdgeEdgeParserRuleCall_1_1_0() { return cEdgeEdgeParserRuleCall_1_1_0; }
	}
	public class EdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ExecTraces.Edge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceNodeCrossReference_1_0 = (CrossReference)cSourceAssignment_1.eContents().get(0);
		private final RuleCall cSourceNodeIDTerminalRuleCall_1_0_1 = (RuleCall)cSourceNodeCrossReference_1_0.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDestinationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDestinationNodeCrossReference_3_0 = (CrossReference)cDestinationAssignment_3.eContents().get(0);
		private final RuleCall cDestinationNodeIDTerminalRuleCall_3_0_1 = (RuleCall)cDestinationNodeCrossReference_3_0.eContents().get(1);
		private final Keyword cTriggerKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTriggerAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTriggerSTRINGTerminalRuleCall_5_0 = (RuleCall)cTriggerAssignment_5.eContents().get(0);
		private final Keyword cActionsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cActionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cActionsSTRINGTerminalRuleCall_7_0 = (RuleCall)cActionsAssignment_7.eContents().get(0);
		private final Keyword cStatusKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cStatusAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cStatusTransStatusEnumRuleCall_9_0 = (RuleCall)cStatusAssignment_9.eContents().get(0);
		private final Keyword cGuardKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cGuardAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cGuardSTRINGTerminalRuleCall_11_0 = (RuleCall)cGuardAssignment_11.eContents().get(0);
		
		//Edge:
		//	'From' source=[Node]
		//	'To' destination=[Node]
		//	'Trigger' trigger=STRING
		//	'Actions' actions=STRING
		//	'Status' status=TransStatus
		//	'guard' guard=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'From' source=[Node] 'To' destination=[Node] 'Trigger' trigger=STRING 'Actions' actions=STRING 'Status'
		//status=TransStatus 'guard' guard=STRING
		public Group getGroup() { return cGroup; }
		
		//'From'
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }
		
		//source=[Node]
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }
		
		//[Node]
		public CrossReference getSourceNodeCrossReference_1_0() { return cSourceNodeCrossReference_1_0; }
		
		//ID
		public RuleCall getSourceNodeIDTerminalRuleCall_1_0_1() { return cSourceNodeIDTerminalRuleCall_1_0_1; }
		
		//'To'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//destination=[Node]
		public Assignment getDestinationAssignment_3() { return cDestinationAssignment_3; }
		
		//[Node]
		public CrossReference getDestinationNodeCrossReference_3_0() { return cDestinationNodeCrossReference_3_0; }
		
		//ID
		public RuleCall getDestinationNodeIDTerminalRuleCall_3_0_1() { return cDestinationNodeIDTerminalRuleCall_3_0_1; }
		
		//'Trigger'
		public Keyword getTriggerKeyword_4() { return cTriggerKeyword_4; }
		
		//trigger=STRING
		public Assignment getTriggerAssignment_5() { return cTriggerAssignment_5; }
		
		//STRING
		public RuleCall getTriggerSTRINGTerminalRuleCall_5_0() { return cTriggerSTRINGTerminalRuleCall_5_0; }
		
		//'Actions'
		public Keyword getActionsKeyword_6() { return cActionsKeyword_6; }
		
		//actions=STRING
		public Assignment getActionsAssignment_7() { return cActionsAssignment_7; }
		
		//STRING
		public RuleCall getActionsSTRINGTerminalRuleCall_7_0() { return cActionsSTRINGTerminalRuleCall_7_0; }
		
		//'Status'
		public Keyword getStatusKeyword_8() { return cStatusKeyword_8; }
		
		//status=TransStatus
		public Assignment getStatusAssignment_9() { return cStatusAssignment_9; }
		
		//TransStatus
		public RuleCall getStatusTransStatusEnumRuleCall_9_0() { return cStatusTransStatusEnumRuleCall_9_0; }
		
		//'guard'
		public Keyword getGuardKeyword_10() { return cGuardKeyword_10; }
		
		//guard=STRING
		public Assignment getGuardAssignment_11() { return cGuardAssignment_11; }
		
		//STRING
		public RuleCall getGuardSTRINGTerminalRuleCall_11_0() { return cGuardSTRINGTerminalRuleCall_11_0; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ExecTraces.Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIdKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdINTTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Keyword cLevelKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLevelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLevelINTTerminalRuleCall_5_0 = (RuleCall)cLevelAssignment_5.eContents().get(0);
		private final Keyword cVarDataKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cVarDataAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cVarDataVariableParserRuleCall_8_0 = (RuleCall)cVarDataAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cStatusKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cStatusAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cStatusStateStatusEnumRuleCall_11_0 = (RuleCall)cStatusAssignment_11.eContents().get(0);
		private final Keyword cConstraintsKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cConstraintsAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cConstraintsSTRINGTerminalRuleCall_13_0 = (RuleCall)cConstraintsAssignment_13.eContents().get(0);
		private final Keyword cOutgoingEdgesKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cOutgoingEdgesAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final CrossReference cOutgoingEdgesEdgeCrossReference_15_0 = (CrossReference)cOutgoingEdgesAssignment_15.eContents().get(0);
		private final RuleCall cOutgoingEdgesEdgeIDTerminalRuleCall_15_0_1 = (RuleCall)cOutgoingEdgesEdgeCrossReference_15_0.eContents().get(1);
		private final Keyword cIncomingEdgesKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Assignment cIncomingEdgesAssignment_17 = (Assignment)cGroup.eContents().get(17);
		private final CrossReference cIncomingEdgesEdgeCrossReference_17_0 = (CrossReference)cIncomingEdgesAssignment_17.eContents().get(0);
		private final RuleCall cIncomingEdgesEdgeIDTerminalRuleCall_17_0_1 = (RuleCall)cIncomingEdgesEdgeCrossReference_17_0.eContents().get(1);
		
		//Node: //root ?= 'rootNode' 
		//	'name' name=ID 'id' id=INT 'level' level=INT //'parent' '{' Parent+=[Node]*  '}'
		//	//'childs' '{' Childs+=[Node]*  '}'
		//	'VarData' '{' VarData+=Variable* '}' 'status' status=StateStatus 'constraints' constraints=STRING 'outgoingEdges'
		//	outgoingEdges+=[Edge]* 'incomingEdges' incomingEdges+=[Edge]*;
		@Override public ParserRule getRule() { return rule; }
		
		////root ?= 'rootNode' 
		//'name' name=ID 'id' id=INT 'level' level=INT //'parent' '{' Parent+=[Node]*  '}'
		////'childs' '{' Childs+=[Node]*  '}'
		//'VarData' '{' VarData+=Variable* '}' 'status' status=StateStatus 'constraints' constraints=STRING 'outgoingEdges'
		//outgoingEdges+=[Edge]* 'incomingEdges' incomingEdges+=[Edge]*
		public Group getGroup() { return cGroup; }
		
		////root ?= 'rootNode' 
		//'name'
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'id'
		public Keyword getIdKeyword_2() { return cIdKeyword_2; }
		
		//id=INT
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//INT
		public RuleCall getIdINTTerminalRuleCall_3_0() { return cIdINTTerminalRuleCall_3_0; }
		
		//'level'
		public Keyword getLevelKeyword_4() { return cLevelKeyword_4; }
		
		//level=INT
		public Assignment getLevelAssignment_5() { return cLevelAssignment_5; }
		
		//INT
		public RuleCall getLevelINTTerminalRuleCall_5_0() { return cLevelINTTerminalRuleCall_5_0; }
		
		////'parent' '{' Parent+=[Node]*  '}'
		////'childs' '{' Childs+=[Node]*  '}'
		//'VarData'
		public Keyword getVarDataKeyword_6() { return cVarDataKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//VarData+=Variable*
		public Assignment getVarDataAssignment_8() { return cVarDataAssignment_8; }
		
		//Variable
		public RuleCall getVarDataVariableParserRuleCall_8_0() { return cVarDataVariableParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
		
		//'status'
		public Keyword getStatusKeyword_10() { return cStatusKeyword_10; }
		
		//status=StateStatus
		public Assignment getStatusAssignment_11() { return cStatusAssignment_11; }
		
		//StateStatus
		public RuleCall getStatusStateStatusEnumRuleCall_11_0() { return cStatusStateStatusEnumRuleCall_11_0; }
		
		//'constraints'
		public Keyword getConstraintsKeyword_12() { return cConstraintsKeyword_12; }
		
		//constraints=STRING
		public Assignment getConstraintsAssignment_13() { return cConstraintsAssignment_13; }
		
		//STRING
		public RuleCall getConstraintsSTRINGTerminalRuleCall_13_0() { return cConstraintsSTRINGTerminalRuleCall_13_0; }
		
		//'outgoingEdges'
		public Keyword getOutgoingEdgesKeyword_14() { return cOutgoingEdgesKeyword_14; }
		
		//outgoingEdges+=[Edge]*
		public Assignment getOutgoingEdgesAssignment_15() { return cOutgoingEdgesAssignment_15; }
		
		//[Edge]
		public CrossReference getOutgoingEdgesEdgeCrossReference_15_0() { return cOutgoingEdgesEdgeCrossReference_15_0; }
		
		//ID
		public RuleCall getOutgoingEdgesEdgeIDTerminalRuleCall_15_0_1() { return cOutgoingEdgesEdgeIDTerminalRuleCall_15_0_1; }
		
		//'incomingEdges'
		public Keyword getIncomingEdgesKeyword_16() { return cIncomingEdgesKeyword_16; }
		
		//incomingEdges+=[Edge]*
		public Assignment getIncomingEdgesAssignment_17() { return cIncomingEdgesAssignment_17; }
		
		//[Edge]
		public CrossReference getIncomingEdgesEdgeCrossReference_17_0() { return cIncomingEdgesEdgeCrossReference_17_0; }
		
		//ID
		public RuleCall getIncomingEdgesEdgeIDTerminalRuleCall_17_0_1() { return cIncomingEdgesEdgeIDTerminalRuleCall_17_0_1; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ExecTraces.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueLiteralParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Variable:
		//	'name' name=ID '=' value=Literal;
		@Override public ParserRule getRule() { return rule; }
		
		//'name' name=ID '=' value=Literal
		public Group getGroup() { return cGroup; }
		
		//'name'
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=Literal
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Literal
		public RuleCall getValueLiteralParserRuleCall_3_0() { return cValueLiteralParserRuleCall_3_0; }
	}
	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ExecTraces.RealLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIntPartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIntPartINTTerminalRuleCall_0_0 = (RuleCall)cIntPartAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDecimalPartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDecimalPartINTTerminalRuleCall_2_0 = (RuleCall)cDecimalPartAssignment_2.eContents().get(0);
		
		///*VarType:  
		//		name = (   'bool' | 'int'  | 'string'| 'real')
		//;
		//*/ RealLiteral:
		//	intPart=INT '.' decimalPart=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//intPart=INT '.' decimalPart=INT
		public Group getGroup() { return cGroup; }
		
		//intPart=INT
		public Assignment getIntPartAssignment_0() { return cIntPartAssignment_0; }
		
		//INT
		public RuleCall getIntPartINTTerminalRuleCall_0_0() { return cIntPartINTTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//decimalPart=INT
		public Assignment getDecimalPartAssignment_2() { return cDecimalPartAssignment_2; }
		
		//INT
		public RuleCall getDecimalPartINTTerminalRuleCall_2_0() { return cDecimalPartINTTerminalRuleCall_2_0; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ExecTraces.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoolLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRealLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Literal:
		//	IntLiteral
		//	| BoolLiteral
		//	| RealLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//IntLiteral | BoolLiteral | RealLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_0() { return cIntLiteralParserRuleCall_0; }
		
		//BoolLiteral
		public RuleCall getBoolLiteralParserRuleCall_1() { return cBoolLiteralParserRuleCall_1; }
		
		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_2() { return cRealLiteralParserRuleCall_2; }
	}
	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ExecTraces.IntLiteral");
		private final Assignment cIntAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIntINTTerminalRuleCall_0 = (RuleCall)cIntAssignment.eContents().get(0);
		
		//IntLiteral:
		//	int=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//int=INT
		public Assignment getIntAssignment() { return cIntAssignment; }
		
		//INT
		public RuleCall getIntINTTerminalRuleCall_0() { return cIntINTTerminalRuleCall_0; }
	}
	public class BoolLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ExecTraces.BoolLiteral");
		private final Assignment cBoolAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBoolBOOLEANTerminalRuleCall_0 = (RuleCall)cBoolAssignment.eContents().get(0);
		
		//BoolLiteral:
		//	bool=BOOLEAN;
		@Override public ParserRule getRule() { return rule; }
		
		//bool=BOOLEAN
		public Assignment getBoolAssignment() { return cBoolAssignment; }
		
		//BOOLEAN
		public RuleCall getBoolBOOLEANTerminalRuleCall_0() { return cBoolBOOLEANTerminalRuleCall_0; }
	}
	
	public class StateStatusElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ExecTraces.StateStatus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNewEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNewNewKeyword_0_0 = (Keyword)cNewEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUnSafeStateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUnSafeStateUnSafeTransKeyword_1_0 = (Keyword)cUnSafeStateEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRepeatedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRepeatedRepeatedKeyword_2_0 = (Keyword)cRepeatedEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum StateStatus:
		//	new | unSafeState='unSafeTrans' | Repeated='repeated';
		public EnumRule getRule() { return rule; }
		
		//new | unSafeState='unSafeTrans' | Repeated='repeated'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//new
		public EnumLiteralDeclaration getNewEnumLiteralDeclaration_0() { return cNewEnumLiteralDeclaration_0; }
		
		//'new'
		public Keyword getNewNewKeyword_0_0() { return cNewNewKeyword_0_0; }
		
		//unSafeState='unSafeTrans'
		public EnumLiteralDeclaration getUnSafeStateEnumLiteralDeclaration_1() { return cUnSafeStateEnumLiteralDeclaration_1; }
		
		//'unSafeTrans'
		public Keyword getUnSafeStateUnSafeTransKeyword_1_0() { return cUnSafeStateUnSafeTransKeyword_1_0; }
		
		//Repeated='repeated'
		public EnumLiteralDeclaration getRepeatedEnumLiteralDeclaration_2() { return cRepeatedEnumLiteralDeclaration_2; }
		
		//'repeated'
		public Keyword getRepeatedRepeatedKeyword_2_0() { return cRepeatedRepeatedKeyword_2_0; }
	}
	public class TransStatusElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ExecTraces.TransStatus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNormalEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNormalNormalKeyword_0_0 = (Keyword)cNormalEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cErrorEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cErrorErrorKeyword_1_0 = (Keyword)cErrorEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUnsafeTransEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUnsafeTransUnSafeTransKeyword_2_0 = (Keyword)cUnsafeTransEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRedundantTransEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRedundantTransRedundantKeyword_3_0 = (Keyword)cRedundantTransEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TransStatus:
		//	normal='Normal' | error='Error' | unsafeTrans='unSafeTrans' | redundantTrans='Redundant';
		public EnumRule getRule() { return rule; }
		
		//normal='Normal' | error='Error' | unsafeTrans='unSafeTrans' | redundantTrans='Redundant'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//normal='Normal'
		public EnumLiteralDeclaration getNormalEnumLiteralDeclaration_0() { return cNormalEnumLiteralDeclaration_0; }
		
		//'Normal'
		public Keyword getNormalNormalKeyword_0_0() { return cNormalNormalKeyword_0_0; }
		
		//error='Error'
		public EnumLiteralDeclaration getErrorEnumLiteralDeclaration_1() { return cErrorEnumLiteralDeclaration_1; }
		
		//'Error'
		public Keyword getErrorErrorKeyword_1_0() { return cErrorErrorKeyword_1_0; }
		
		//unsafeTrans='unSafeTrans'
		public EnumLiteralDeclaration getUnsafeTransEnumLiteralDeclaration_2() { return cUnsafeTransEnumLiteralDeclaration_2; }
		
		//'unSafeTrans'
		public Keyword getUnsafeTransUnSafeTransKeyword_2_0() { return cUnsafeTransUnSafeTransKeyword_2_0; }
		
		//redundantTrans='Redundant'
		public EnumLiteralDeclaration getRedundantTransEnumLiteralDeclaration_3() { return cRedundantTransEnumLiteralDeclaration_3; }
		
		//'Redundant'
		public Keyword getRedundantTransRedundantKeyword_3_0() { return cRedundantTransRedundantKeyword_3_0; }
	}
	
	private final ExecTracesElements pExecTraces;
	private final EdgeElements pEdge;
	private final StateStatusElements eStateStatus;
	private final TransStatusElements eTransStatus;
	private final NodeElements pNode;
	private final VariableElements pVariable;
	private final RealLiteralElements pRealLiteral;
	private final LiteralElements pLiteral;
	private final IntLiteralElements pIntLiteral;
	private final BoolLiteralElements pBoolLiteral;
	private final TerminalRule tBOOLEAN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExecTracesGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pExecTraces = new ExecTracesElements();
		this.pEdge = new EdgeElements();
		this.eStateStatus = new StateStatusElements();
		this.eTransStatus = new TransStatusElements();
		this.pNode = new NodeElements();
		this.pVariable = new VariableElements();
		this.pRealLiteral = new RealLiteralElements();
		this.pLiteral = new LiteralElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pBoolLiteral = new BoolLiteralElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "umlrtsyntesizer.ExecTraces.BOOLEAN");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("umlrtsyntesizer.ExecTraces".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ExecTraces:
	//	ComponentName=ID (Node+=Node | Edge+=Edge)+;
	public ExecTracesElements getExecTracesAccess() {
		return pExecTraces;
	}
	
	public ParserRule getExecTracesRule() {
		return getExecTracesAccess().getRule();
	}
	
	//Edge:
	//	'From' source=[Node]
	//	'To' destination=[Node]
	//	'Trigger' trigger=STRING
	//	'Actions' actions=STRING
	//	'Status' status=TransStatus
	//	'guard' guard=STRING;
	public EdgeElements getEdgeAccess() {
		return pEdge;
	}
	
	public ParserRule getEdgeRule() {
		return getEdgeAccess().getRule();
	}
	
	//enum StateStatus:
	//	new | unSafeState='unSafeTrans' | Repeated='repeated';
	public StateStatusElements getStateStatusAccess() {
		return eStateStatus;
	}
	
	public EnumRule getStateStatusRule() {
		return getStateStatusAccess().getRule();
	}
	
	//enum TransStatus:
	//	normal='Normal' | error='Error' | unsafeTrans='unSafeTrans' | redundantTrans='Redundant';
	public TransStatusElements getTransStatusAccess() {
		return eTransStatus;
	}
	
	public EnumRule getTransStatusRule() {
		return getTransStatusAccess().getRule();
	}
	
	//Node: //root ?= 'rootNode' 
	//	'name' name=ID 'id' id=INT 'level' level=INT //'parent' '{' Parent+=[Node]*  '}'
	//	//'childs' '{' Childs+=[Node]*  '}'
	//	'VarData' '{' VarData+=Variable* '}' 'status' status=StateStatus 'constraints' constraints=STRING 'outgoingEdges'
	//	outgoingEdges+=[Edge]* 'incomingEdges' incomingEdges+=[Edge]*;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//Variable:
	//	'name' name=ID '=' value=Literal;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	///*VarType:  
	//		name = (   'bool' | 'int'  | 'string'| 'real')
	//;
	//*/ RealLiteral:
	//	intPart=INT '.' decimalPart=INT;
	public RealLiteralElements getRealLiteralAccess() {
		return pRealLiteral;
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}
	
	//Literal:
	//	IntLiteral
	//	| BoolLiteral
	//	| RealLiteral;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//IntLiteral:
	//	int=INT;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//BoolLiteral:
	//	bool=BOOLEAN;
	public BoolLiteralElements getBoolLiteralAccess() {
		return pBoolLiteral;
	}
	
	public ParserRule getBoolLiteralRule() {
		return getBoolLiteralAccess().getRule();
	}
	
	//terminal BOOLEAN:
	//	'true'
	//	| 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
